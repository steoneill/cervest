import React from "react";
import Table from "../components/table";
import { Head } from "next/document";

export default function Index({ data }) {
  const { dates, locations } = data;
  const [initialLocations] = React.useState(locations);
  const [filteredLocations, setFilteredLocations] = React.useState(locations);

  const handleFilter = (e) => {
    const { value } = e.target;

    const filteredLocations =
      value !== "all"
        ? locations.filter((location) =>
            location.regionName.toLowerCase().includes(value.toLowerCase())
          )
        : initialLocations;

    setFilteredLocations(filteredLocations);
  };
  return (
    <main className={"bg-gray-50 min-h-screen"}>
      <header className={" px-6 py-8 lg:py-12"}>
        <div className={"container mx-auto flex justify-between"}>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className={"w-36"}
            viewBox="0 0 500 166.8"
          >
            <path
              d="M220.85 104.94c-3.99 3.28-9.07 4.92-15.23 4.92-5.01 0-9.41-1.12-13.2-3.35-3.79-2.23-6.73-5.36-8.83-9.39-2.1-4.03-3.15-8.64-3.15-13.86 0-5.21 1.07-9.81 3.2-13.81 2.13-3.99 5.13-7.09 8.98-9.29 3.86-2.2 8.29-3.3 13.3-3.3 6.09 0 11.11 1.62 15.07 4.87 3.96 3.25 6.45 7.71 7.46 13.4h-8.43c-.81-3.32-2.5-5.95-5.08-7.92-2.57-1.96-5.68-2.94-9.34-2.94-4.94 0-8.95 1.76-12.03 5.28-3.08 3.52-4.62 8.09-4.62 13.7 0 5.68 1.54 10.3 4.62 13.86 3.08 3.55 7.09 5.33 12.03 5.33 3.79 0 6.97-.98 9.54-2.94 2.57-1.96 4.23-4.67 4.97-8.12h8.32c-1.05 5.77-3.59 10.28-7.58 13.56zm15.45-35.47c2.06-3.99 4.96-7.09 8.68-9.29 3.72-2.2 7.98-3.3 12.79-3.3 4.74 0 8.93.98 12.59 2.94 3.65 1.96 6.53 4.81 8.63 8.53 2.1 3.72 3.21 8.09 3.35 13.09 0 .75-.07 1.93-.2 3.55h-40.2v.71c.14 5.07 1.69 9.14 4.67 12.18 2.98 3.05 6.87 4.57 11.67 4.57 3.72 0 6.88-.93 9.49-2.79 2.6-1.86 4.35-4.45 5.23-7.76h8.42c-1.02 5.28-3.55 9.59-7.61 12.94-4.06 3.35-9.03 5.02-14.92 5.02-5.14 0-9.64-1.1-13.5-3.3-3.86-2.2-6.85-5.31-8.98-9.34-2.13-4.03-3.2-8.64-3.2-13.86-.01-5.26 1.02-9.9 3.09-13.89zm37.4 8.63c-.41-4.4-2.05-7.82-4.92-10.25-2.88-2.44-6.51-3.65-10.91-3.65-3.93 0-7.38 1.29-10.35 3.86-2.98 2.57-4.67 5.92-5.08 10.05h31.26zm42.18-20.61v8.12h-4.16c-4.94 0-8.48 1.66-10.61 4.97-2.13 3.32-3.2 7.41-3.2 12.28v26.39h-8.32V57.49h7.21l1.12 7.82c1.49-2.37 3.42-4.26 5.79-5.68s5.65-2.13 9.85-2.13h2.32zm4.67 0h8.93l15.63 42.33 15.53-42.33h8.73l-19.39 51.77h-10.05l-19.38-51.77zm51.75 11.98c2.06-3.99 4.96-7.09 8.68-9.29 3.72-2.2 7.98-3.3 12.79-3.3 4.74 0 8.93.98 12.59 2.94 3.65 1.96 6.53 4.81 8.63 8.53 2.1 3.72 3.21 8.09 3.35 13.09 0 .75-.07 1.93-.2 3.55h-40.2v.71c.14 5.07 1.69 9.14 4.67 12.18 2.98 3.05 6.87 4.57 11.67 4.57 3.72 0 6.88-.93 9.49-2.79 2.6-1.86 4.35-4.45 5.23-7.76h8.43c-1.01 5.28-3.55 9.59-7.61 12.94-4.06 3.35-9.03 5.02-14.92 5.02-5.14 0-9.64-1.1-13.5-3.3-3.86-2.2-6.85-5.31-8.98-9.34-2.13-4.03-3.2-8.64-3.2-13.86-.01-5.26 1.02-9.9 3.08-13.89zm37.41 8.63c-.41-4.4-2.05-7.82-4.92-10.25-2.88-2.44-6.51-3.65-10.91-3.65-3.93 0-7.38 1.29-10.35 3.86-2.98 2.57-4.67 5.92-5.08 10.05h31.26zm21.6 14.11c.13 3.11 1.5 5.65 4.11 7.61 2.6 1.96 5.97 2.94 10.1 2.94 3.65 0 6.61-.73 8.88-2.18 2.27-1.45 3.4-3.37 3.4-5.74 0-2.03-.54-3.59-1.62-4.67s-2.49-1.83-4.21-2.23c-1.73-.41-4.18-.81-7.36-1.22-4.47-.54-8.12-1.25-10.96-2.13-2.84-.88-5.14-2.28-6.9-4.21-1.76-1.93-2.64-4.58-2.64-7.97 0-3.05.86-5.75 2.59-8.12 1.73-2.37 4.08-4.21 7.05-5.53 2.98-1.32 6.33-1.98 10.05-1.98 6.09 0 11.05 1.42 14.87 4.26 3.82 2.84 5.94 6.9 6.34 12.18h-8.32c-.34-2.71-1.66-4.94-3.96-6.7-2.3-1.76-5.18-2.64-8.63-2.64-3.52 0-6.36.73-8.53 2.18-2.17 1.46-3.25 3.37-3.25 5.74 0 1.76.51 3.11 1.52 4.06 1.01.95 2.32 1.59 3.91 1.93 1.59.34 4.01.71 7.26 1.12 4.53.54 8.27 1.29 11.22 2.23 2.94.95 5.31 2.47 7.11 4.57 1.79 2.1 2.69 4.94 2.69 8.53 0 3.11-.91 5.85-2.74 8.22-1.83 2.37-4.3 4.2-7.41 5.48-3.11 1.29-6.56 1.93-10.35 1.93-6.77 0-12.2-1.56-16.29-4.67-4.1-3.11-6.18-7.44-6.24-12.99h8.31zm45.65-27.11h-9.34v-7.61h9.34V42.97h8.32v14.52h13.09v7.61h-13.09v30.55c0 2.17.42 3.71 1.27 4.62.84.91 2.32 1.37 4.42 1.37H500v7.61h-9.54c-4.87 0-8.34-1.08-10.4-3.25-2.06-2.16-3.1-5.58-3.1-10.25V65.1z"
              fill="#17005e"
            />
            <path
              d="M106.02 91.39c-4.1 0-8.11 1.11-11.61 3.22l-39.74 20.83V51.36l39.74 20.83c3.49 2.11 7.5 3.22 11.61 3.22 12.41 0 22.51-10.1 22.51-22.51 0-6.22-2.61-12.22-7.16-16.46L81.68 4.14C78.23 1.43 74.08 0 69.68 0c-9.04 0-16.64 6.22-18.8 14.59-2.5-1.18-5.23-1.8-8.03-1.8-10.15 0-18.43 8.09-18.79 18.16a19.49 19.49 0 00-4.63-.56C8.72 30.39 0 39.11 0 49.83v67.13c0 10.72 8.72 19.44 19.44 19.44 1.56 0 3.11-.19 4.61-.56.15 10.25 8.52 18.55 18.81 18.55 2.83 0 5.59-.63 8.11-1.84 2.28 8.2 9.79 14.25 18.71 14.25 4.4 0 8.54-1.43 12.02-4.16l39.55-32.18.11-.1a22.574 22.574 0 007.16-16.46c0-12.41-10.09-22.51-22.5-22.51zM69.68 4.43c3.39 0 6.6 1.1 9.23 3.17l39.49 32.13c3.67 3.45 5.7 8.13 5.7 13.17a18 18 0 01-2.14 8.52L54.89 17.01c1.17-7.12 7.35-12.58 14.79-12.58zm-15 17.75l64.71 42.85c-3.31 3.64-8.07 5.95-13.36 5.95-3.31 0-6.55-.9-9.37-2.61L54.68 46.36V22.18zM24.04 131.23c-1.48.48-3.01.74-4.6.74-8.28 0-15.01-6.73-15.01-15.01V49.83c0-8.28 6.73-15.01 15.01-15.01 1.59 0 3.12.26 4.6.74v95.67zm4.42-99.61c0-7.94 6.46-14.39 14.39-14.39 2.63 0 5.17.71 7.4 2.05 0 .05-.01.1-.01.16v24.6L28.46 32.62v-1zm0 6l21.78 11.42v68.72l-21.78 11.42V37.62zm14.4 112.35c-7.94 0-14.39-6.46-14.39-14.39v-1.4l21.78-11.42v24.61c0 .18.02.35.03.53a14.34 14.34 0 01-7.42 2.07zm11.82-29.53L96.53 98.5l.12-.07c2.82-1.71 6.06-2.61 9.37-2.61 5.42 0 10.27 2.41 13.59 6.19l-64.93 43v-24.57zm69.42-6.54c0 5.04-2.02 9.72-5.7 13.17l-39.46 32.11c-2.66 2.09-5.86 3.2-9.26 3.2-7.32 0-13.43-5.28-14.74-12.23l67.15-44.47c1.28 2.46 2.01 5.25 2.01 8.22z"
              fill="#714cf8"
            />
          </svg>
          <label>
            <select
              onChange={handleFilter}
              className={
                "bg-white py-4 px-6 rounded-lg focus:ring-brand-purple ring-brand-blue ring-2 text-brand-purple"
              }
            >
              <option value="all">See All</option>
              {locations.map((location) => (
                <option
                  key={`${location.regionName}-select`}
                  value={location.regionName.toLowerCase()}
                >
                  {location.regionName}
                </option>
              ))}
            </select>
          </label>
        </div>
      </header>
      <section className={"container mx-auto py-12"}>
        <h1 className={"text-lg text-brand-blue pb-4"}>Rainfall Tracker</h1>
        <Table dates={dates} filteredLocations={filteredLocations} />
      </section>
    </main>
  );
}

export async function getStaticProps() {
  const res = await fetch("http://localhost:3000/api/rainfall");
  const data = await res.json();

  const locations = [];
  const dates = data.map((day) => day.date);

  data.forEach((day) => {
    day.data.forEach((region) => {
      const location = locations.find(
        (loc) => loc.regionName === region.regionName
      );
      if (location) {
        location.data.push(region.value);
        location.total += region.value;
        location.daysOver10 += region.value > 10 ? 1 : 0;
      } else {
        locations.push({
          regionName: region.regionName,
          data: [region.value],
          total: region.value,
          daysOver10: region.value > 10 ? 1 : 0,
        });
      }
    });
  });

  return {
    props: {
      data: {
        dates,
        locations,
      },
    },
  };
}
